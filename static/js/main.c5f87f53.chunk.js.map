{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handlechange","type","onChange","App","state","searchField","fetch","then","response","json","result","setState","this","filteredMonsters","filter","toLowerCase","includes","event","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAEaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UACLC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,6BAEP,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJjBC,EAAW,SAAAR,GAEpB,OADAS,QAAQC,IAAIV,GAER,qBAAKC,UAAU,YAAf,SAEID,EAAMW,SAASC,KAAI,SAAAR,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCTtBQ,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAYC,EAAmB,EAAnBA,aACnC,OACI,uBACId,UAAU,aACVe,KAAK,SACLF,YAAeA,EACfG,SAAYF,MCmCTG,G,wDAtCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXR,SAAW,GACXS,YAAc,IAJL,E,qDAOb,WAAoB,IAAD,OACjBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAI,EAAKC,SAAS,CAACf,SAAUc,S,oBAE7C,WAAW,IAAD,SAC0BE,KAAKR,MAA/BR,EADA,EACAA,SAAUS,EADV,EACUA,YAClBX,QAAQC,IAAIC,EAAUS,GACtB,IAAMQ,EAAmBjB,EAASkB,QAAO,SAAAzB,GACvC,OAAOA,EAAQE,KAAKwB,cAAcC,SAASX,EAAYU,kBAEzD,OACE,sBAAK7B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEa,YAAc,kBACdC,aACE,SAAAiB,GACE,EAAKN,SAAS,CAACN,YAAaY,EAAMC,OAAOC,QAAQ,WAC/CzB,QAAQC,IAAI,EAAKS,MAAMC,mBAK/B,cAAC,EAAD,CAAUT,SAAUiB,W,GAhCVO,cCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c5f87f53.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\nexport const Card = props => {\n    return (\n        <div className=\"card-container\">\n            <img alt=\"monster\"\n                src={`https://robohash.org/${props.monster.id}/?set=set2&size=180x180`}\n            />\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    )\n}","import React from 'react';\nimport './card-list.styles.css'\n\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => {\n    console.log(props)\n    return (\n        <div className=\"card-list\">\n        {\n            props.monsters.map(monster => (\n                <Card key={monster.id} monster={monster}></Card>\n            ))\n        }\n        </div>\n    )\n}","import React from 'react';\nimport './search-box.styles.css';\nexport const SearchBox = ({placeholder,handlechange }) => {\n    return (\n        <input\n            className=\"search-box\"\n            type=\"search\"\n            placeholder = {placeholder}\n            onChange = {handlechange}\n        />\n    )\n}\n","import {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport './App.css';\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      monsters : [],\n      searchField : ''\n    }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(result => this.setState({monsters: result}))\n  }\n  render () {\n    const { monsters, searchField } = this.state\n    console.log(monsters, searchField)\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder = \"Search Monsters\"\n          handlechange = {\n            event => {\n              this.setState({searchField: event.target.value}, ()=>{\n                console.log(this.state.searchField)\n              })\n            }\n          }\n        />\n        <CardList monsters={filteredMonsters}>\n        </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}